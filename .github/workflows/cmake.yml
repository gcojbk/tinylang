name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: cppcheck-action
      # You may pin to the exact commit or the version.
      # uses: deep5050/cppcheck-action@b4d7c69b911c24817691b4b210586568a858b4c5
      uses: deep5050/cppcheck-action@v3.0
      with:
        # GITHUB_TOKEN secret < automatically provided by Github , you don't need to set up >
        github_token: 
        # Show information messages when library files have info.
        check_library: # optional, default is disable
        # Print preprocessor output on stdout and don't do any further processing.
        skip_preprocessor: # optional, default is disable
        # Enable additional checks
        enable: # optional, default is all
        # Give a source file or source file directory to exclude from the check
        exclude_check: # optional, default is disable
        #  Allow that Cppcheck reports even though the analysis is inconclusive.
        inconclusive: # optional, default is enable
        # Enable inline suppressions
        inline_suppression: # optional, default is disable
        # Forces cppcheck to check all files as the given language
        force_language: # optional, default is disable
        # Force checking of all configurations in files
        force: # optional, default is disable
        # Max depth in whole program analysis
        max_ctu_depth: # optional, default is disable
        # Specifies platform specific types and sizes
        platform: # optional, default is disable
        # Set the C/C++ standard
        std: # optional, default is c++20
        # file where the result to be dumped
        output_file: # optional, default is cppcheck_report.txt
        # Branch that the badge will target. Defaults to the current branch.
        target_branch: # optional, default is 
        # Any other options you want to add, separate with a space, wrong options will cause a failure
        other_options: # optional, default is disable
        # Branch that the action will target on pull_request. Defaults to GITHUB_BASE_REF.
        pull_request_branch: # optional, default is 
        # Repository that the report will be pushed on. Defaults to the current repository.
        target_repository: # optional, default is 
        # Repository that the action will target on pull_request. Defaults to TARGET_REPOSITORY
        pull_request_repository: # optional, default is 

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
